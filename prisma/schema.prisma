generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Users {
  uid        String    @id @default(uuid())
  email      String    @unique
  firstName  String
  lastName   String
  password   String
  phone      String
  userRole   UserRoles @default(USER)
  userStatus Status    @default(ACTIVE)
  createdAt  DateTime  @default(now())
  updatedAt  DateTime? @updatedAt
  Cart       Cart[]

  @@map("Users")
}

model ProductCategories {
  uid            String   @id @default(uuid())
  name           String   @unique
  slug           String
  description    String?
  parentUid      String?
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  categoryStatus Status   @default(ACTIVE)

  parentCategory    ProductCategories?  @relation("CategoryToCategory", fields: [parentUid], references: [uid], onDelete: Cascade)
  productCategores  ProductCategories[] @relation("CategoryToCategory")
  ProductAttributes ProductAttributes[]
  BaseProducts      BaseProducts[]

  @@map("product_categories")
}

model ProductAttributes {
  uid             String   @id @default(uuid())
  name            String
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  attributeStatus Status   @default(ACTIVE)

  categoryUid          ProductCategories @relation(fields: [productCategoriesUid], references: [uid])
  productCategoriesUid String
  AttributeValues      AttributeValues[]

  @@map("product_attributes")
}

model AttributeValues {
  uid         String   @id @default(uuid())
  name        String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  valueStatus Status   @default(ACTIVE)

  attributeUid         ProductAttributes @relation(fields: [productAttributesUid], references: [uid])
  productAttributesUid String
  ProductConfigs       ProductConfigs[]

  @@map("attribute_values")
}

model BaseProducts {
  uid         String            @id @default(uuid())
  name        String            @unique
  slug        String
  basePrice   Decimal
  categoryUid String
  category    ProductCategories @relation(fields: [categoryUid], references: [uid])
  about       String            @default("No About Available")

  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  productStatus Status         @default(ACTIVE)
  ProductItems  ProductItems[]

  @@map("base_products")
}

model ProductItems {
  uid            String  @id @default(uuid())
  baseProductUid String
  price          Decimal
  stock          Int
  sku            String  @unique
  discount       Float?

  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  productItemStatus Status   @default(ACTIVE)

  baseProduct    BaseProducts     @relation(fields: [baseProductUid], references: [uid])
  ProductConfigs ProductConfigs[]
  CartItems      CartItems[]

  @@map("product_items")
}

model ProductConfigs {
  uid               String  @id @default(uuid())
  productItemUid    String?
  attributeValueUid String?

  productItem    ProductItems?    @relation(fields: [productItemUid], references: [uid])
  attributeValue AttributeValues? @relation(fields: [attributeValueUid], references: [uid])

  @@map("product_configs")
}

model Cart {
  uid       String   @id @default(uuid())
  userUid   String
  createdAt DateTime @default(now())

  user      Users       @relation(fields: [userUid], references: [uid], onDelete: Cascade)
  CartItems CartItems[]
}

model CartItems {
  uid        String   @id @default(uuid())
  cartUid    String
  productUid String
  quantity   Int
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  cart    Cart         @relation(fields: [cartUid], references: [uid], onDelete: Cascade)
  product ProductItems @relation(fields: [productUid], references: [uid], onDelete: Cascade)
}

enum Status {
  ACTIVE
  PENDING
  SUSPENDED
  DELETED
}

enum UserRoles {
  USER
  ADMIN
  SUPER_ADMIN
}
